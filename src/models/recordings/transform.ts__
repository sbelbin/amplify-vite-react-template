import { Recording } from './recording';

import hasValue from '../../utilities/optional/has_value';
import { parseDate, parseOptionalDate } from '../../utilities/date_time/parse_date';

/**
 * Transforms a recording session that was fetched from the database table and transforms it into a
 * representation which is better suited to be used in the application code.
 *
 * @param recording - Recording that is to be transformed.
 * @returns An application representation of the recording session.
 */
export function fromDbRecording<T>(recording: T): Recording {

  return {
    id: recording.id,
    instituteId: recording.instituteId,
    sessionId: recording.sessionId,
    patientId: recording.patientId,
    startTime: parseDate(recording.startTimestamp),
    finishTime: parseOptionalDate(recording.finishTimestamp),
    localTimeZone: recording.localTimeZone,
    isLiveFeed: !hasValue(recording.finishTimestamp)
  };
}